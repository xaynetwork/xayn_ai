# You can find more information about the design decisions here:
# https://github.com/xaynetwork/xayn_ai/pull/21

name: Merge master CI

on:
  push:
    branches:
    - '_bors_staging'
    - '_bors_trying'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  RUST_STABLE: 1.55
  RUST_NIGHTLY: nightly-2021-09-09
  # cmd: `shasum -a 256 cross`
  CROSS_CHECKSUM: 18a3599273773a7d1e333b413751f0adc1a83ec8045d060fee4f0639bd6baaf0
  # On targets like `*-linux-android*` and `wasm32-unknown-unknown`, reading the model
  # takes a considerable amount of time if it is compiled with the default opt-level
  # for tests. Therefore, we compile them with a higher opt-level to run them faster.
  OPT_TESTS_RUSTFLAGS: '-C opt-level=3 -C debug-assertions=yes -D warnings'
  FLUTTER_VERSION: '2.5.3'
  DART_WORKSPACE: ${{ github.workspace }}/bindings/dart
  CARGO_INCREMENTAL: 0

jobs:
  dev-ci:
    uses: ./.github/workflows/ci_reusable_wf.yml

  test-android-libs:
    name: test-android-libs
    needs: dev-ci
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android]
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Install Cross
        shell: bash
        run: |
          wget -q -O - https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar xvzf -
          echo "${{ env.CROSS_CHECKSUM }} *cross" | shasum -c -
          mv cross ~/.cargo/bin/

      - uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef # 1.3.0+

      - name: Download data
        run: sh download_data.sh

      - name: Test Android library ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ env.OPT_TESTS_RUSTFLAGS }}
        run: cross test --target ${{ matrix.target }} --all-targets --no-default-features -- -Z unstable-options --report-time

  build-ios-libs:
    name: build-ios-libs
    needs: dev-ci
    runs-on: macos-11
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Install ${{ env.RUST_STABLE }} toolchain with target ${{ matrix.target }}
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef # 1.3.0+

      - name: Build iOS library ${{ matrix.target }}
        working-directory: ./xayn-ai-ffi-c
        run: cargo build --target ${{ matrix.target }} -p xayn-ai-ffi-c

      - name: Prepare lib for upload
        run: |
          dir=target/${{ matrix.target }}/debug
          mv $dir/libxayn_ai_ffi_c.a $dir/libxayn_ai_ffi_c_${{ matrix.target }}.a

      - name: Upload library artifacts
        uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
        with:
          name: build-ios-${{ matrix.target }}-${{ github.sha }}
          retention-days: 1
          if-no-files-found: error
          path: target/${{ matrix.target}}/debug/libxayn_ai_ffi_c_${{ matrix.target }}.a

  test-wasm-libs:
    name: test-wasm-libs
    needs: dev-ci
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: wasm32-unknown-unknown
          default: true

      - uses: Swatinem/rust-cache@3bb3a9a087029c7bc392586cdc88cb6f66b9c6ef # 1.3.0+

      - name: Install wasm-pack
        uses: ./.ci/install-wasm-pack

      - name: Download data
        run: sh download_data.sh

      - name: Test WASM library
        working-directory: ./xayn-ai-ffi-wasm
        env:
          RUSTFLAGS: ${{ env.OPT_TESTS_RUSTFLAGS }}
        run: wasm-pack test --firefox --chrome --headless

  flutter-build-example:
    name: flutter-build-example
    needs: [build-ios-libs, dev-ci]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        target: [android, ios, web]
        include:
          - target: android
            os: ubuntu-20.04
            cmd: flutter build apk --debug --split-per-abi
          - target: ios
            os: macos-11
            cmd: flutter build ios --debug --no-codesign
          - target: web
            os: ubuntu-20.04
            cmd: flutter build web
    steps:
      - name: Checkout repository
        uses: actions/checkout@a12a3943b4bdde767164f792f33f40b04645d846 # v3.0.0

      - name: Install libclang-10-dev
        if: matrix.os == 'ubuntu-20.04'
        run: sudo apt-get install libclang-10-dev

      - name: Install gomplate
        uses: ./.ci/install-gomplate

      - name: Download ${{ needs.dev-ci.outputs.cache-key-linux-lib }} artifacts
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
        with:
          name: ${{ needs.dev-ci.outputs.cache-key-linux-lib }}
          path: ${{ runner.temp }}/${{ needs.dev-ci.outputs.cache-key-linux-lib }}

      - name: Move C-headers
        working-directory: ${{ runner.temp }}/${{ needs.dev-ci.outputs.cache-key-linux-lib }}
        run: |
          mv bindings/dart/ios/Classes/XaynAiFfiCommon.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h
          mv bindings/dart/ios/Classes/XaynAiFfiDart.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h

      - name: Download iOS aarch64 artifacts
        if: matrix.target == 'ios'
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
        with:
          name: build-ios-aarch64-apple-ios-${{ github.sha }}
          path: ${{ runner.temp }}/build-ios-${{ github.sha }}

      - name: Download iOS x84_64 artifacts
        if: matrix.target == 'ios'
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
        with:
          name: build-ios-x86_64-apple-ios-${{ github.sha }}
          path: ${{ runner.temp }}/build-ios-${{ github.sha }}

      - name: Move iOS artifacts
        if: matrix.target == 'ios'
        run: |
          cd ${{ runner.temp }}/${{ needs.dev-ci.outputs.cache-key-linux-lib }}
          cd ${{ runner.temp }}/build-ios-${{ github.sha }}
          find . -iname '*.a' -exec cp \{\} ${{ env.DART_WORKSPACE }}/ios \;

      - name: Install flutter
        uses: subosito/flutter-action@5e1529bc12adae5b26f30f0a4046ac743d6f0c5d # v2.3.0
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Download data
        run: sh download_data.sh

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        uses: ./.ci/generate-flutter-ffi
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Build asset artifacts
        uses: ./.ci/build-asset-artifacts
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Other Dart code generation
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run build_runner build

      - name: Build flutter example for ${{ matrix.target }}
        working-directory: ${{ env.DART_WORKSPACE }}/example
        run: ${{ matrix.cmd }}

      - name: Build ios archive
        if: matrix.target == 'ios'
        working-directory: ${{ env.DART_WORKSPACE }}/example
        run: xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner archive -configuration release -archivePath build/Runner.xcarchive CODE_SIGNING_ALLOWED="NO"

  # this is an helper that needs all the real leafs of the workflow.
  # It makes easier notify_staging_failure because we only need to check
  # for this job
  ci-ok:
    name: ci-ok
    needs:
      - test-wasm-libs
      - test-android-libs
      - flutter-build-example
      - dev-ci
    runs-on: ubuntu-20.04
    steps:
      - run: echo "Helper job"

  notify-staging-failure:
    name: notify-staging-failure
    needs: ci-ok
    # always() allows to run even if ci-ok is not successful
    # we only want this to run on the staging branch
    if: always() && github.ref == 'refs/heads/staging'
    runs-on: ubuntu-20.04
    steps:
      - name: Notify failure
        if: needs.ci-ok.result != 'success'
        uses: 8398a7/action-slack@a74b761b4089b5d730d813fbedcd2ec5d394f3af # v3.13.0
        with:
          status: custom
          fields: workflow, repo
          custom_payload: |
            {
              attachments: [{
                title: 'Staging CI failed :warning:',
                color: 'danger',
                text: `CI: ${process.env.AS_WORKFLOW}\nRepository: ${process.env.AS_REPO}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
