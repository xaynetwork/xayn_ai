name: Release-CI

on:
  workflow_dispatch:
  push:
    branches:
      - "release"
      - "staging"

env:
  RUST_STABLE: 1.51
  CARGO_NDK: 2.4.1
  ANDROID_PLATFORM_VERSION: 21
  CARGO_LIPO: 3.1.1
  FLUTTER_VERSION: '2.2.3'
  DART_WORKSPACE: ${{ github.workspace }}/bindings/dart
  ANDROID_LIBS_DIR: ${{ github.workspace }}/bindings/dart/android/src/main/jniLibs
  PRODUCTION_RUSTFLAGS: '-Ccodegen-units=1 -Clto=on -Cembed-bitcode=yes'
  CARGO_INCREMENTAL: 0

permissions:
  contents: read

jobs:
  cancel:
    name: cancel-previous-runs
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    permissions:
      actions: write
    steps:
      # When you git push, this GitHub Action will capture the current Branch and SHA.
      # It will query GitHub's API to find previous workflow runs that match the Branch
      # but do not match the SHA. These in-progress runs will be canceled leaving only the latest run.
      - uses: styfle/cancel-workflow-action@a40b8845c0683271d9f53dfcb887a7e181d3918b # v0.9.1
        with:
          all_but_latest: true
          access_token: ${{ github.token }}

  cargo-registry-cache:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: cargo-registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      # We want to create a new cache after a week. Otherwise, the cache will
      # take up too much space by caching old dependencies
      - name: Generate Year + ISO week number key
        id: get-date
        shell: bash
        run: echo "::set-output name=date::$(/bin/date -u "+%Y-%V")"

      - name: Generate cargo registry cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-${{ github.job }}-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/Cargo.lock') }})"

      - name: Restore cargo registry ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-${{ github.job }}-${{ steps.get-date.outputs.date }}-

      - name: Fetch dependencies
        run: cargo fetch

  install-cargo-ndk:
    name: install-cargo-ndk
    runs-on: ubuntu-20.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 15
    steps:
      - name: Generate cargo-ndk cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-${{ github.job }}-${{ env.CARGO_NDK }})"

      - name: Restore ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        id: cargo-ndk-cache
        with:
          path: ~/.cargo/bin/cargo-ndk
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install cargo-ndk ${{ env.CARGO_NDK }}
        if: ${{ !steps.cargo-ndk-cache.outputs.cache-hit }}
        run: cargo install cargo-ndk --version ${{ env.CARGO_NDK }}

  install-cargo-lipo:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#rust-tools
    name: install-cargo-lipo
    runs-on: macos-10.15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 15
    steps:
      - name: Generate cargo-lipo cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-${{ github.job }}-${{ env.CARGO_LIPO }})"

      - name: Restore ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        id: cargo-lipo-cache
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install cargo-lipo ${{ env.CARGO_LIPO }}
        if: ${{ !steps.cargo-lipo-cache.outputs.cache-hit }}
        run: cargo install cargo-lipo --version ${{ env.CARGO_LIPO }}

  build-release-headers:
    name: build-release-headers
    needs: [cargo-registry-cache]
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install libclang-10-dev
        run: sudo apt-get install libclang-10-dev

      - name: Install flutter
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8 # v1.5.3
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.cargo-registry-cache.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: Build headers
        run: cargo check

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        uses: ./.ci/generate-flutter-ffi
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Other Dart code generation
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run build_runner build

      - name: Find .g.dart Artifacts
        id: find_g_dart_artifacts
        run: |
          artifacts="$(find ${{ env.DART_WORKSPACE }}/lib -type f -regex ".*\.g\.dart" -exec echo -n {}%0A \; )"
          echo "::set-output name=artifacts::$artifacts"

      - name: Upload artifact
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: headers-${{ github.sha }}
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h
            ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h
            ${{ env.DART_WORKSPACE }}/lib/src/common/ffi/genesis.dart
            ${{ env.DART_WORKSPACE }}/lib/src/mobile/ffi/genesis.dart
            ${{ steps.find_g_dart_artifacts.outputs.artifacts }}

  build-release-android-libs:
    name: build-release-android-libs
    needs: [cargo-registry-cache, install-cargo-ndk]
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    strategy:
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android]
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.cargo-registry-cache.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.target }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.target }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: Restore ${{ needs.install-cargo-ndk.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: ~/.cargo/bin/cargo-ndk
          key: ${{ needs.install-cargo-ndk.outputs.cache-key }}

      - name: Build Android library ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ env.PRODUCTION_RUSTFLAGS }}
        run: |
          cargo ndk \
            -t ${{ matrix.target }} \
            -p ${{ env.ANDROID_PLATFORM_VERSION }} \
            -o ${{ env.ANDROID_LIBS_DIR }} \
            build --release -p xayn-ai-ffi-c

      - name: Upload artifact
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: android-${{ matrix.target }}-${{ github.sha }}
          retention-days: 1
          if-no-files-found: error
          path: ${{ env.ANDROID_LIBS_DIR }}

  build-release-ios-libs:
    name: build-release-ios-libs
    needs: [cargo-registry-cache, install-cargo-lipo]
    runs-on: macos-10.15
    timeout-minutes: 25
    strategy:
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.cargo-registry-cache.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.target }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.target }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: Restore ${{ needs.install-cargo-lipo.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ needs.install-cargo-lipo.outputs.cache-key }}

      - name: Build iOS library
        env:
          RUSTFLAGS: ${{ env.PRODUCTION_RUSTFLAGS }}
        run: cargo lipo --targets ${{ matrix.target }} --release -p xayn-ai-ffi-c

      - name: Strip symbols
        run: |
          strip -S -x -r target/${{ matrix.target}}/release/libxayn_ai_ffi_c.a

      - name: Rename lib
        run: |
          dir=target/${{ matrix.target }}/release
          mv $dir/libxayn_ai_ffi_c.a $dir/libxayn_ai_ffi_c_${{ matrix.target }}.a

      - name: Upload artifact
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: ios-${{ matrix.target }}-${{ github.sha }}
          retention-days: 1
          if-no-files-found: error
          path: target/${{ matrix.target}}/release/libxayn_ai_ffi_c_${{ matrix.target }}.a

  build-release-wasm-libs:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: build-release-wasm-libs
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      matrix:
        wasm_feature: [none, threads]
        include:
          - wasm_feature: threads
            cargo_args: -- -Z build-std=panic_abort,std
            RUSTFLAGS: '-C target-feature=+atomics,+bulk-memory,+mutable-globals'
    env:
      OUT_DIR: ${{ github.workspace }}/out
    outputs:
      out-dir: ${{ env.OUT_DIR }}
      none-version: ${{ steps.wasm-lib.outputs.none-version }}
      threads-version: ${{ steps.wasm-lib.outputs.threads-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        if: matrix.wasm_feature == 'none'
        id: rust-toolchain-stable
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: wasm32-unknown-unknown
          default: true

      - name: Install ${{ env.RUST_NIGHTLY }} toolchain
        if: matrix.wasm_feature == 'threads'
        id: rust-toolchain-nightly
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_NIGHTLY }}
          target: wasm32-unknown-unknown
          components: rust-src
          default: true

      - id: rust-toolchain
        run: |
          if [ ${{ matrix.wasm_feature }} == "none" ]; then
            echo "::set-output name=rustc::$(echo "${{ steps.rust-toolchain-stable.outputs.rustc }}")"
          else
            echo "::set-output name=rustc::$(echo "${{ steps.rust-toolchain-nightly.outputs.rustc }}")"
          fi

      - name: Install wasm-opt
        uses: ./.ci/install-wasm-opt

      - name: Install wasm-pack
        uses: ./.ci/install-wasm-pack

      - name: Restore ${{ needs.cargo-registry-cache.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.wasm_feature }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.wasm_feature }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: Build WASM library
        env:
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
        run: |
          echo "$RUSTFLAGS"
          wasm-pack build xayn-ai-ffi-wasm --no-typescript --out-dir ${{ env.OUT_DIR }}/wasm/ --out-name genesis --target web --release ${{ matrix.cargo_args }}
          rm out/wasm/.gitignore out/wasm/package.json

      - name: Generate WASM library version key
        id: wasm-lib
        run: |
          # don't forget to update the path when changing `OUT_DIR`
          WASM_ARTIFACTS_VERSION=${{ hashFiles('out/wasm/*') }}
          WASM_VERSION=wasm_${{ matrix.wasm_feature }}_$WASM_ARTIFACTS_VERSION
          echo "::set-output name=${{ matrix.wasm_feature }}-version::$(echo $WASM_VERSION)"

          echo "::set-output name=upload-name::$(echo build-wasm-${{ matrix.wasm_feature }}-release-$WASM_ARTIFACTS_VERSION)"
          echo "::set-output name=upload-path::$(echo ${{ env.OUT_DIR }}/$WASM_VERSION)"
      - run: mv ${{ env.OUT_DIR }}/wasm/ ${{ steps.wasm-lib.outputs.upload-path }}

      - name: Upload WASM library
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: ${{ steps.wasm-lib.outputs.upload-name }}
          retention-days: 1
          if-no-files-found: error
          path: ${{ env.OUT_DIR }}

  build-asset-artifacts:
    name: build-asset-artifacts
    runs-on: ubuntu-20.04
    needs: build-release-wasm-libs
    timeout-minutes: 20
    outputs:
      upload-name: ${{ steps.asset-artifacts.outputs.upload-name }}
      json-metadata: ${{ steps.asset-paths.outputs.json-metadata }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install flutter
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8 # v1.5.3
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install gomplate
        uses: ./.ci/install-gomplate

      - name: Download WASM artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          path: ${{ runner.temp }}/wasm_assets

      - run: |
          mkdir -p ${{ needs.build-release-wasm-libs.outputs.out-dir }}
          cd ${{ runner.temp }}/wasm_assets
          cp -R build-wasm-*/* ${{ needs.build-release-wasm-libs.outputs.out-dir }}

      - name: Download data
        run: sh download_data.sh

      - name: Build asset artifacts
        id: asset-paths
        uses: ./.ci/build-asset-artifacts
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}
          wasm-version: ${{ needs.build-release-wasm-libs.outputs.none-version }}
          wasm-out-dir-path: ${{ needs.build-release-wasm-libs.outputs.out-dir }}

      - name: Generate asset artifacts name
        id: asset-artifacts
        run: echo "::set-output name=upload-name::$(echo build-asset-artifacts-${{ github.sha }})"

      - name: Upload asset artifacts
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: ${{ steps.asset-artifacts.outputs.upload-name }}
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ steps.asset-paths.outputs.dart-metadata }}
            ${{ steps.asset-paths.outputs.json-metadata }}
            ${{ steps.asset-paths.outputs.chunks-dir }}

  publish-asset-artifacts:
    name: publish-asset-artifacts
    runs-on: ubuntu-20.04
    needs: [build-release-wasm-libs, build-asset-artifacts]
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Download asset artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          name: ${{ needs.build-asset-artifacts.outputs.upload-name }}
          path: ${{ github.workspace }}

      - name: Download WASM artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          path: ${{ runner.temp }}/wasm_assets

      - run: |
          mkdir -p ${{ needs.build-release-wasm-libs.outputs.out-dir }}
          cd ${{ runner.temp }}/wasm_assets
          cp -R build-wasm-*/* ${{ needs.build-release-wasm-libs.outputs.out-dir }}

      - name: Download data
        run: sh download_data.sh

      - name: Install s3cmd
        if: github.ref != 'refs/heads/release'
        uses: ./.ci/install-s3cmd
        with:
          access-key: ${{ secrets.STAGING_ASSETS_BUCKET_ACCESS_KEY }}
          secret-key: ${{ secrets.STAGING_ASSETS_BUCKET_SECRET_KEY }}

      - name: Upload assets to S3
        if: github.ref != 'refs/heads/release'
        shell: bash
        env:
          BUCKET_URL: s3://xayn_ai_staging_assets
        run: |
          set -e

          for ASSET in $(cat ${{ needs.build-asset-artifacts.outputs.json-metadata }} | jq -c '.assets[]'); do
              FRAGMENTS_LEN=$(echo $ASSET | jq -r '.fragments | length')
              if [ "$FRAGMENTS_LEN" = "0" ]; then
                  ASSET_URL_SUFFIX=$(echo $ASSET | jq -r '.url_suffix')
                  ASSET_PATH=$(echo $ASSET | jq -r '.path')
                  s3cmd sync --acl-public --guess-mime-type $ASSET_PATH $ASSET_PATH ${{ env.BUCKET_URL }}/$ASSET_URL_SUFFIX
              else
                  for FRAGMENT in $(echo $ASSET | jq -c '.fragments[]'); do
                      FRAGMENT_URL_SUFFIX=$(echo $FRAGMENT | jq -r '.url_suffix')
                      FRAGMENT_PATH=$(echo $FRAGMENT | jq -r '.path')
                      s3cmd sync --acl-public --guess-mime-type $FRAGMENT_PATH $FRAGMENT_PATH ${{ env.BUCKET_URL }}/$FRAGMENT_URL_SUFFIX
                  done
              fi
          done

      - name: Install KeyCDN SSH privkey
        if: github.ref == 'refs/heads/release'
        uses: shimataro/ssh-key-action@3c9b0fc6f2d223b8450b02a0445f526350fc73e0 # v2.3.1
        with:
          key: ${{ secrets.KEYCDN_RSYNC_PRIVKEY }}
          name: keycdn-publisher
          known_hosts: 'placeholder'
          config: |
            Host keycdn
              HostName rsync.keycdn.com
              User ${{ secrets.KEYCDN_RSYNC_USERNAME }}
              IdentityFile ~/.ssh/keycdn-publisher

      - name: Dynamically add KeyCDN to known_hosts
        if: github.ref == 'refs/heads/release'
        run: ssh-keyscan -H rsync.keycdn.com | tee -a ~/.ssh/known_hosts

      - name: Upload assets (KeyCDN)
        if: github.ref == 'refs/heads/release'
        env:
          PREPARE_LOCAL_ASSETS_DIR: ${{ runner.temp }}/prepare_local_assets
          PREPARE_ASSETS_DIR: ${{ runner.temp }}/prepare_assets
        run: |
          set -e

          mkdir -p $PREPARE_LOCAL_ASSETS_DIR
          cd $PREPARE_LOCAL_ASSETS_DIR

          for ASSET in $(cat ${{ github.workspace }}/${{ needs.build-asset-artifacts.outputs.json-metadata }} | jq -c '.assets[]'); do
              ASSET_URL_SUFFIX=$(echo $ASSET | jq -r '.url_suffix')
              ASSET_VERSION=$(dirname $ASSET_URL_SUFFIX)

              FRAGMENTS_LEN=$(echo $ASSET | jq -r '.fragments | length')
              if [ "$FRAGMENTS_LEN" = "0" ]; then
                  ASSET_PATH=$(echo $ASSET | jq -r '.path')
                  mkdir -p $ASSET_VERSION
                  cp -r ${{ github.workspace }}/$ASSET_PATH $ASSET_URL_SUFFIX

                  ASSET_CHECKSUM=$(echo $ASSET | jq -r '.checksum')
                  echo "$ASSET_CHECKSUM *$ASSET_URL_SUFFIX" | shasum -c -
              else
                  for FRAGMENT in $(echo $ASSET | jq -c '.fragments[]'); do
                      FRAGMENT_URL_SUFFIX=$(echo $FRAGMENT | jq -r '.url_suffix')
                      FRAGMENT_PATH=$(echo $FRAGMENT | jq -r '.path')
                      mkdir -p $ASSET_VERSION
                      cp -r ${{ github.workspace }}/$FRAGMENT_PATH $FRAGMENT_URL_SUFFIX

                      FRAGMENT_CHECKSUM=$(echo $FRAGMENT | jq -r '.checksum')
                      echo "$FRAGMENT_CHECKSUM *$FRAGMENT_URL_SUFFIX" | shasum -c -
                  done
              fi
          done

          mkdir -p $PREPARE_ASSETS_DIR
          cd $PREPARE_ASSETS_DIR

          # Download the remote asset (if it exists) of the local asset that we want to upload.
          for ASSET_VERSION in $(cat ${{ github.workspace }}/${{ needs.build-asset-artifacts.outputs.json-metadata }} | jq -c -r '.assets[].url_suffix' | awk -F "/" '{print $1}'| sort -n  | uniq ); do
              rsync -rtzv keycdn:${{ secrets.KEYCDN_RSYNC_ZONE }}/$ASSET_VERSION . || true
          done

          # In order to not accidentally override remote assets we sync the local and remote assets
          # with the `--ignore-existing` flag. This way we only add new local assets.
          rsync -avv --ignore-existing $PREPARE_LOCAL_ASSETS_DIR/ .

          # Sync with KeyCDN
          rsync -rtzv --chmod=D2755,F644 . keycdn:${{ secrets.KEYCDN_RSYNC_ZONE }}/

  release:
    name: release
    runs-on: ubuntu-20.04
    needs:
      - build-release-headers
      - build-release-android-libs
      - build-release-ios-libs
      - build-asset-artifacts
      - publish-asset-artifacts
    timeout-minutes: 60
    steps:
      - name: Install SSH key
        uses: shimataro/ssh-key-action@3c9b0fc6f2d223b8450b02a0445f526350fc73e0 # v2.3.1
        with:
          key: ${{ secrets.SSH }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Download artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          path: /tmp/artifacts/

      - name: Copy Android libs
        run: |
          mkdir -p ${{ env.ANDROID_LIBS_DIR }}
          cd /tmp/artifacts
          cp -r android-*/* ${{ env.ANDROID_LIBS_DIR }}

      - name: Copy iOS lib
        run: |
          cd /tmp/artifacts
          cp -r ios-*/* ${{ env.DART_WORKSPACE }}/ios

      - name: Copy headers
        shell: bash
        run: |
          cd /tmp/artifacts/headers-${{ github.sha }}
          cp ios/Classes/XaynAiFfiCommon.h ${{ env.DART_WORKSPACE }}/ios/Classes
          cp ios/Classes/XaynAiFfiDart.h ${{ env.DART_WORKSPACE }}/ios/Classes
          cp lib/src/common/ffi/genesis.dart ${{ env.DART_WORKSPACE }}/lib/src/common/ffi
          cp lib/src/mobile/ffi/genesis.dart ${{ env.DART_WORKSPACE }}/lib/src/mobile/ffi
          find lib/ -type f -regex ".*\.g\.dart" -exec cp --parents '{}' ${{ env.DART_WORKSPACE }}/ \;

      - name: Download asset artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          name: ${{ needs.build-asset-artifacts.outputs.upload-name }}
          path: ${{ github.workspace }}

      - name: Get current branch
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: current_branch

      - name: Copy Repository
        shell: bash
        run: |
          # Create a temporary folder to clone the other repo
          CLONE_DIR=$(mktemp -d)
          DST_REPO='xaynetwork/xayn_ai_release'
          EMAIL='ci@xayn.io'
          USERNAME='ci'
          BRANCH=${{ steps.current_branch.outputs.branch }}
          SRC_COMMIT=$(git rev-parse HEAD)
          SRC_COMMIT_MSG=$(git log --format=%B -n1)
          git config --global user.email $EMAIL
          git config --global user.name $USERNAME

          # Check if the branch exists, if so, clone using the existing branch,
          # if not, clone using the default branch and let git push to send to the right branch
          BRANCH_EXISTS=$(git ls-remote --heads "git@github.com:$DST_REPO.git" $BRANCH | wc -l);
          if [ $BRANCH_EXISTS -eq 0 ];then
            git clone --depth 1 "git@github.com:$DST_REPO.git" $CLONE_DIR
          else
            git clone -b $BRANCH --depth 1 "git@github.com:$DST_REPO.git" $CLONE_DIR;
          fi
          cd $CLONE_DIR

          # Cleaning all files on the destination repository
          # --ignore-unmatch avoid to fail if the repository is empty
          git rm --ignore-unmatch -r .

          rsync -a --exclude example ${{ env.DART_WORKSPACE }}/ .

          # Remove files from .gitignore that needs to be uploaded to the release repo
          sed -i -e '/DELETE_AFTER_THIS_IN_RELEASE/,$d' .gitignore

          git add -A

          # Commit only if something changed
          if [ $(git status --porcelain | wc -l) -gt 0 ]; then
            git commit --message "$SRC_COMMIT_MSG

            https://github.com/xaynetwork/xayn_ai/commit/$SRC_COMMIT
            https://github.com/xaynetwork/xayn_ai/tree/$BRANCH"
            git push -u origin HEAD:$BRANCH
          fi
