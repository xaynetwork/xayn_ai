name: Test-ci

on:
  push:
    branches-ignore:
      # we push on release only from staging and release represent
      # a snapshot of staging in a given point in time
      - 'release'

env:
  RUST_STABLE: 1.51
  # corresponds to the release date of 1.51.0
  # https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1510-2021-03-25
  RUST_NIGHTLY: nightly-2021-03-25
  CARGO_NDK: 2.4.1
  ANDROID_PLATFORM_VERSION: 21
  CARGO_LIPO: 3.1.1
  FLUTTER_VERSION: '2.2.3'
  JAVA_VERSION: '12.x'
  DART_WORKSPACE: ${{ github.workspace }}/bindings/dart
  ANDROID_LIBS_DIR: ${{ github.workspace }}/bindings/dart/android/src/main/jniLibs
  PRODUCTION_RUSTFLAGS: '-Ccodegen-units=1 -Clto=on -Cembed-bitcode=yes'
  CARGO_INCREMENTAL: 0

permissions:
  contents: read

jobs:

  build-release-wasm-libs:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: build-release-wasm-libs
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      matrix:
        wasm_feature: [none, threads]
        include:
          - wasm_feature: threads
            cargo_args: -- -Z build-std=panic_abort,std
            RUSTFLAGS: '-C target-feature=+atomics,+bulk-memory,+mutable-globals'
    env:
      OUT_DIR: ${{ github.workspace }}/out
      WASM_OUT_DIR: ${{ env.OUT_DIR }}/wasm
    outputs:
      out-dir: ${{ env.OUT_DIR }}
      none-version: ${{ steps.wasm-lib.outputs.none-version }}
      threads-version: ${{ steps.wasm-lib.outputs.threads-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Install ${{ env.RUST_STABLE }} toolchain
        if: matrix.wasm_feature == 'none'
        id: rust-toolchain-stable
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: wasm32-unknown-unknown
          default: true

      - name: Install ${{ env.RUST_NIGHTLY }} toolchain
        if: matrix.wasm_feature == 'threads'
        id: rust-toolchain-nightly
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_NIGHTLY }}
          target: wasm32-unknown-unknown
          components: rust-src
          default: true

      - id: rust-toolchain
        run: |
          if [ ${{ matrix.wasm_feature }} == "none" ]; then
            echo "::set-output name=rustc::$(echo "${{ steps.rust-toolchain-stable.outputs.rustc }}")"
          else
            echo "::set-output name=rustc::$(echo "${{ steps.rust-toolchain-nightly.outputs.rustc }}")"
          fi

      - name: Install wasm-opt
        uses: ./.ci/install-wasm-opt

      - name: Install wasm-pack
        uses: ./.ci/install-wasm-pack

      # - name: Restore ${{ needs.cargo-registry-cache.outputs.cache-key }} cache
      #   uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
      #   with:
      #     path: |
      #       ~/.cargo/registry/index
      #       ~/.cargo/registry/cache
      #       ~/.cargo/git/db
      #     key: ${{ needs.cargo-registry-cache.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.wasm_feature }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.rust-toolchain.outputs.rustc }}-${{ github.job }}-${{ matrix.wasm_feature }}-${{ needs.cargo-registry-cache.outputs.cache-date }}-

      - name: Build WASM library
        env:
          RUSTFLAGS: ${{ matrix.RUSTFLAGS }}
        run: |
          echo "$RUSTFLAGS"
          wasm-pack build xayn-ai-ffi-wasm --no-typescript --out-dir ${{ env.WASM_OUT_DIR }} --out-name genesis --target web --release ${{ matrix.cargo_args }}
          rm out/wasm/.gitignore out/wasm/package.json

      - name: Generate WASM library version key
        id: wasm-lib
        run: |
          # don't forget to update the path when changing `OUT_DIR` or `WASM_OUT_DIR`
          WASM_ARTIFACTS_VERSION=${{ hashFiles('out/wasm/*') }}
          WASM_VERSION=wasm_${{ matrix.wasm_feature }}_$WASM_ARTIFACTS_VERSION
          echo "::set-output name=${{ matrix.wasm_feature }}-version::$(echo $WASM_VERSION)"

          WASM_ARTIFACTS_PATH=${{ env.OUT_DIR }}/$WASM_VERSION
          echo "::set-output name=${{ matrix.wasm_feature }}-path::$(echo $WASM_ARTIFACTS_PATH)"

          echo "::set-output name=upload-name::$(echo build-wasm-${{ matrix.wasm_feature }}-release-$WASM_ARTIFACTS_VERSION)"
          echo "::set-output name=upload-path::$(echo $WASM_ARTIFACTS_PATH)"
      - run: mv ${{ env.OUT_DIR }}/wasm/ ${{ steps.wasm-lib.outputs.upload-path }}

      - name: Upload WASM library
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: ${{ steps.wasm-lib.outputs.upload-name }}
          retention-days: 1
          if-no-files-found: error
          path: ${{ env.OUT_DIR }}

  build:
    needs: build-release-wasm-libs
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      - name: Download WASM artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          path: ${{ runner.temp }}/wasm_assets

      - run: |
          mkdir -p ${{ needs.build-release-wasm-libs.outputs.out-dir }}
          cd ${{ runner.temp }}/wasm_assets
          ls -R
          cp -R build-wasm_*/* ${{ needs.build-release-wasm-libs.outputs.out-dir }}
          ls -R
          echo ${{ needs.build-release-wasm-libs.outputs.none-version }}
          echo ${{ needs.build-release-wasm-libs.outputs.threads-version }}
