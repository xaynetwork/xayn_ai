# You can find more information about the design decisions here:
# https://github.com/xaynetwork/xayn_ai/pull/21

name: Rust-CI

on:
  push:
    branches-ignore:
      # we push on release only from staging and release represent
      # a snapshot of staging in a given point in time
      - 'release'

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  RUST_STABLE: 1.51
  RUST_NIGHTLY: nightly-2021-05-10
  CARGO_NDK: 2.3.0
  ANDROID_PLATFORM_VERSION: 21
  CARGO_LIPO: 3.1.1
  # cmd: `shasum -a 256 cross`
  CROSS_CHECKSUM: 18a3599273773a7d1e333b413751f0adc1a83ec8045d060fee4f0639bd6baaf0
  # On targets like `*-linux-android*` and `wasm32-unknown-unknown`, reading the model
  # takes a considerable amount of time if it is compiled with the default opt-level
  # for tests. Therefore, we compile them with a higher opt-level to run them faster.
  OPT_TESTS_RUSTFLAGS: '-C opt-level=3 -C debug-assertions=yes -D warnings'
  FLUTTER_VERSION: '2.2.1'
  JAVA_VERSION: '12.x'
  DART_WORKSPACE: ${{ github.workspace }}/bindings/dart
  CARGO_INCREMENTAL: 0

jobs:
  registry-cache:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: cargo-fetch
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f # v2.3.4

      # We want to create a new cache after a week. Otherwise, the cache will
      # take up too much space by caching old dependencies
      - name: Generate Year + ISO week number key
        id: get-date
        shell: bash
        run: echo "::set-output name=date::$(/bin/date -u "+%Y-%V")"

      - name: Generate cargo registry cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/Cargo.lock') }})"

      - name: Restore cargo registry ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353 # v2.1.6
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-

      - name: Fetch dependencies
        run: cargo fetch

  format:
    name: cargo-fmt
    needs: registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_NIGHTLY }} toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: ${{ env.RUST_NIGHTLY }}
          components: rustfmt
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      # cargo fmt does not create any artifacts, therefore we don't need to cache the target folder
      - name: cargo fmt
        run: cargo fmt --all -- --check

  check:
    name: cargo-check
    needs: registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo check
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  clippy:
    name: cargo-clippy
    needs: [registry-cache, check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          components: clippy
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo clippy
        run: |
          cargo clippy --all-targets -- --deny warnings
          cargo clippy --all-targets --all-features -- --deny warnings

  test:
    name: cargo-test
    needs: [registry-cache, check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Generate build artifacts key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo "${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}")"

      - name: Cache build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ${{ github.workspace }}/target
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Download data
        run: sh download_data.sh

      - name: Run tests
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo test --all-targets
          cargo test --all-targets --all-features
          cargo test --all-features --doc

  coverage:
    name: cargo-tarpaulin
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          toolchain: ${{ env.RUST_STABLE }}
          profile: minimal
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Download data
        run: sh download_data.sh

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@044a1e5bdace8dd2f727b1af63c1d9a1d3572068 # v0.1.3
        with:
          version: '0.16.0'
          args: '-v --all-features --force-clean --lib --ignore-tests --fail-under 70 --workspace --exclude xayn-ai-ffi-wasm --exclude dev-tool --timeout 300'

  install-cargo-lipo:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#rust-tools
    name: install-cargo-lipo
    runs-on: macos-10.15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 15
    steps:
      - name: Generate cargo-lipo cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-lipo-bin-${{ env.CARGO_LIPO }})"

      - name: Restore ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        id: cargo-lipo-cache
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install cargo-lipo ${{ env.CARGO_LIPO }}
        if: ${{ !steps.cargo-lipo-cache.outputs.cache-hit }}
        run: cargo install cargo-lipo --version ${{ env.CARGO_LIPO }}

  test-android-libs:
    name: test-android-libs
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android]
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Install Cross
        shell: bash
        run: |
          wget -q -O - https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar xvzf -
          echo "${{ env.CROSS_CHECKSUM }} *cross" | shasum -c -
          mv cross ~/.cargo/bin/

      - name: Download data
        run: sh download_data.sh

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-test-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-test-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Test Android library ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ env.OPT_TESTS_RUSTFLAGS }}
        run: cross test --target ${{ matrix.target }} --all-targets -- -Z unstable-options --report-time

  build-ios-libs:
    name: build-ios-libs
    needs: [registry-cache, install-cargo-lipo, test]
    runs-on: macos-10.15
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain with target ${{ matrix.target }}
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Restore ${{ needs.install-cargo-lipo.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ needs.install-cargo-lipo.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Build iOS library ${{ matrix.target }}
        working-directory: ./xayn-ai-ffi-c
        run: cargo lipo --targets ${{ matrix.target }}

      - name: Prepare lib for upload
        run: |
          dir=target/${{ matrix.target }}/debug
          mv $dir/libxayn_ai_ffi_c.a $dir/libxayn_ai_ffi_c_${{ matrix.target }}.a

      - name: Upload library artifacts
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: build-ios-${{ matrix.target }}-${{ github.sha }}
          retention-days: 1
          if-no-files-found: error
          path: target/${{ matrix.target}}/debug/libxayn_ai_ffi_c_${{ matrix.target }}.a

  test-wasm-lib:
    name: test-wasm-lib
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: wasm32-unknown-unknown
          default: true

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Install wasm-pack
        uses: ./.ci/install-wasm-pack

      - name: Download data
        run: sh download_data.sh

      - name: Test WASM library
        working-directory: ./xayn-ai-ffi-wasm
        env:
          RUSTFLAGS: ${{ env.OPT_TESTS_RUSTFLAGS }}
        run: wasm-pack test --firefox --chrome --headless

  build-linux-lib:
    name: build-linux-lib
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: ${{ github.workspace }}/target
          key: ${{ needs.test.outputs.cache-key }}

      - name: Build linux lib
        # We have to use the same RUSTFLAGS that are used in the test
        # job in order to be able to reuse the cache. If we do not do this,
        # the compiler will recompile all the libraries from scratch.
        env:
          RUSTFLAGS: "-D warnings"
        run: cargo build

      - name: Generate lib artifacts key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo build-x86_64-unknown-linux-gnu-${{ hashFiles('target/debug/libxayn_ai_ffi_c.so', '${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h', '${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h') }})"

      - name: Upload library artifacts
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074
        with:
          name: ${{ steps.cache-key.outputs.key }}
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/target/debug/libxayn_ai_ffi_c.so
            ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h
            ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h

  flutter-format:
    name: flutter-format
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Setup java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@d9126d7df2f1b080b603441eaf5810ced3614e78 # v2.1.0
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Restore flutter ${{ env.FLUTTER_VERSION }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-cache-${{ env.FLUTTER_VERSION }}

      - name: Set path or install flutter
        # if there is a cache hit, this step will append the `bin` directory of
        # flutter to `PATH`, otherwise it installs flutter
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8 # v1.5.3
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Check dart bindings code formatting
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter format --set-exit-if-changed .

  flutter-checks:
    name: flutter-checks
    needs: build-linux-lib
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        cmd: [analyze, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Install libclang-10-dev
        # required by ffigen
        run: sudo apt-get install libclang-10-dev

      - name: Install gomplate
        uses: ./.ci/install-gomplate

      - name: Setup java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@d9126d7df2f1b080b603441eaf5810ced3614e78
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Restore flutter ${{ env.FLUTTER_VERSION }} cache
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-cache-${{ env.FLUTTER_VERSION }}

      - name: Set path or install flutter
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Download ${{ needs.build-linux-lib.outputs.cache-key }} artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          name: ${{ needs.build-linux-lib.outputs.cache-key }}
          path: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}

      - name: Move C-headers and linux lib
        working-directory: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}
        run: |
          mv bindings/dart/ios/Classes/XaynAiFfiCommon.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h
          mv bindings/dart/ios/Classes/XaynAiFfiDart.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h
          cp -R target ${{ github.workspace }}

      - name: Download data
        run: sh download_data.sh

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        uses: ./.ci/generate-flutter-ffi
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Build asset artifacts
        uses: ./.ci/build-asset-artifacts
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Other Dart code generation
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run build_runner build

      - name: ${{ matrix.cmd }} flutter code
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter ${{ matrix.cmd }}

  flutter-build-example:
    name: flutter-build-example
    needs: [build-linux-lib, build-ios-libs]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        target: [android, ios, web]
        include:
          - target: android
            os: ubuntu-20.04
            cmd: flutter build apk --debug --split-per-abi
          - target: ios
            os: macos-10.15
            cmd: flutter build ios --debug --no-codesign
          - target: web
            os: ubuntu-20.04
            cmd: flutter build web
    steps:
      - name: Checkout repository
        uses: actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f

      - name: Setup java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@d9126d7df2f1b080b603441eaf5810ced3614e78
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install libclang-10-dev
        if: matrix.os == 'ubuntu-20.04'
        run: sudo apt-get install libclang-10-dev

      - name: Install gomplate
        uses: ./.ci/install-gomplate

      - name: Download ${{ needs.build-linux-lib.outputs.cache-key }} artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
        with:
          name: ${{ needs.build-linux-lib.outputs.cache-key }}
          path: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}

      - name: Move C-headers
        working-directory: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}
        run: |
          mv bindings/dart/ios/Classes/XaynAiFfiCommon.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h
          mv bindings/dart/ios/Classes/XaynAiFfiDart.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h

      - name: Download iOS aarch64 artifacts
        if: matrix.target == 'ios'
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
        with:
          name: build-ios-aarch64-apple-ios-${{ github.sha }}
          path: ${{ runner.temp }}/build-ios-${{ github.sha }}

      - name: Download iOS x84_64 artifacts
        if: matrix.target == 'ios'
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
        with:
          name: build-ios-x86_64-apple-ios-${{ github.sha }}
          path: ${{ runner.temp }}/build-ios-${{ github.sha }}

      - name: Move iOS artifacts
        if: matrix.target == 'ios'
        run: |
          cd ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}
          cd ${{ runner.temp }}/build-ios-${{ github.sha }}
          find . -iname '*.a' -exec cp \{\} ${{ env.DART_WORKSPACE }}/ios \;

      - name: Set path or install flutter
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Download data
        run: sh download_data.sh

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        uses: ./.ci/generate-flutter-ffi
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Build asset artifacts
        uses: ./.ci/build-asset-artifacts
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Other Dart code generation
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run build_runner build

      - name: Build flutter example for ${{ matrix.target }}
        working-directory: ${{ env.DART_WORKSPACE }}/example
        run: ${{ matrix.cmd }}

      - name: Build ios archive
        if: matrix.target == 'ios'
        working-directory: ${{ env.DART_WORKSPACE }}/example
        run: xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner archive -configuration release -archivePath build/Runner.xcarchive CODE_SIGNING_ALLOWED="NO"

  # this is an helper that needs all the real leafs of the workflow.
  # It makes easier notify_staging_failure because we only need to check
  # for this job
  one-leaf:
    name: ignore-me
    needs: [flutter-format, coverage, test-wasm-lib, test-android-libs, flutter-checks, flutter-build-example]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        run: echo "Helper job"

  notify-staging-failure:
    name: notify-staging-failure
    needs: [one-leaf]
    # always() allows to run even if one-leaf is not successful
    # we only want this to run on the staging branch
    if: always() && github.ref == 'refs/heads/staging'
    runs-on: ubuntu-20.04
    steps:
      - name: Notify failure
        if: needs.one_leaf.result != 'success'
        uses: 8398a7/action-slack@dcc8c8e9dd8802e21a712dc0c003db97b42efe43 # v3.9.1
        with:
          status: custom
          fields: workflow, job, repo
          custom_payload: |
            {
              username: 'GitHub Actions',
              icon_emoji: ':octocat:',
              attachments: [{
                title: 'Staging CI failed :warning:',
                color: 'danger',
                text: `CI: ${process.env.AS_WORKFLOW}\nRepository: ${process.env.AS_REPO}`,
              }]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
