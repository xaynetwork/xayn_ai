name: Rust-CI

on:
  push:

env:
  RUST_STABLE: 1.49.0
  RUST_NIGHTLY: nightly-2021-01-31
  CARGO_NDK: 2.2.0
  ANDROID_PLATFORM_VERSION: 21
  CARGO_LIPO: 3.1.1

jobs:
  registry-cache:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: cargo-fetch
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # We want to create a new cache after a week. Otherwise, the cache will
      # take up too much space by caching old dependencies
      - name: Generate Year + ISO week number key
        id: get-date
        shell: bash
        run: echo "::set-output name=date::$(/bin/date -u "+%Y-%V")"

      - name: Generate cargo registry cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/Cargo.lock') }})"

      - name: Restore cargo registry ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-

      - name: Fetch dependencies
        run: cargo fetch

  format:
    name: cargo-fmt
    needs: registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install nightly toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_NIGHTLY }}
          components: rustfmt
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      # cargo fmt does not create any artifacts, therefore we don't need to cache the target folder
      - name: cargo fmt
        run: cargo fmt --all -- --check

  check:
    name: cargo-check
    needs: registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo check
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  clippy:
    name: cargo-clippy
    needs: [registry-cache, check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          components: clippy
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo clippy
        run: |
          cargo clippy --all-targets -- --deny warnings
          cargo clippy --all-targets --all-features -- --deny warnings

  test:
    name: cargo-test
    needs: [registry-cache, check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-

      # TODO: cache this as well to avoid frequent downloading
      - name: Download data
        run: sh download_data.sh

      - name: Run tests
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo test --all-targets
          cargo test --all-targets --all-features
          cargo test --all-features --doc

  coverage:
    name: cargo-tarpaulin
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_STABLE }}
          profile: minimal

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-

      # TODO: cache this as well to avoid frequent downloading
      - name: Download data
        run: sh download_data.sh

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.16.0'
          args: '-v --all-features --force-clean --lib --ignore-tests --fail-under 70'

  cargo-ndk:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: cargo-ndk
    runs-on: ubuntu-20.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 15
    steps:
      - name: Generate cargo-ndk cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-ndk-bin-${{ env.CARGO_NDK }})"

      - name: Restore ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/bin/cargo-ndk
          key: ${{ steps.cache-key.outputs.key }}

      - name: Test for cargo-ndk ${{ env.CARGO_NDK }}
        id: test-bin
        shell: bash
        run: echo "::set-output name=exist::$(test -e ~/.cargo/bin/cargo-ndk && echo $?)"

      - name: Install cargo-ndk ${{ env.CARGO_NDK }}
        if: steps.test-bin.outputs.exist != '0'
        run: cargo install cargo-ndk --version ${{ env.CARGO_NDK }}

  cargo-lipo:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#rust-tools
    name: cargo-lipo
    runs-on: macos-10.15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 15
    steps:
      - name: Generate cargo-lipo cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-lipo-bin-${{ env.CARGO_LIPO }})"

      - name: Restore ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ steps.cache-key.outputs.key }}

      - name: Test for cargo-lipo ${{ env.CARGO_LIPO }}
        id: test-bin
        shell: bash
        run: echo "::set-output name=exist::$(test -e ~/.cargo/bin/cargo-lipo && echo $?)"

      - name: Install cargo-lipo ${{ env.CARGO_LIPO }}
        if: steps.test-bin.outputs.exist != '0'
        run: cargo install cargo-lipo --version ${{ env.CARGO_LIPO }}

  test-android-libs:
    name: test-android-libs
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Install Cross
        shell: bash
        run: |
          wget -q -O - https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar xvzf -
          mv cross ~/.cargo/bin/

      - name: Download data
        run: sh download_data.sh

      - name: Restore build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-test-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-test-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Test Android library ${{ matrix.target }}
        # to make the tests run faster, we compile them in release mode
        run: cross test --target ${{ matrix.target }} --release

  build-ios-libs:
    name: build-ios-libs
    needs: [registry-cache, cargo-lipo, test]
    runs-on: macos-10.15
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain with target ${{ matrix.target }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Restore ${{ needs.cargo-lipo.outputs.cache-key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ needs.cargo-lipo.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ env.RUST_STABLE }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ env.RUST_STABLE }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Build iOS library ${{ matrix.target }}
        working-directory: ./xayn-ai-ffi
        run: cargo lipo --targets ${{ matrix.target }}

  # build-android-libs:
  #   name: build-android-libs
  #   needs: [registry-cache, cargo-ndk, test-android-libs]
  #   runs-on: ubuntu-20.04
  #   timeout-minutes: 20
  #   strategy:
  #     matrix:
  #       target: [aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android]
  #       include:
  #         - target: aarch64-linux-android
  #           ndk-target: arm64-v8a
  #         - target: armv7-linux-androideabi
  #           ndk-target: armeabi-v7a
  #         - target: i686-linux-android
  #           ndk-target: x86
  #         - target: x86_64-linux-android
  #           ndk-target: x86_64
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - name: Install ${{ env.RUST_STABLE }} toolchain with target ${{ matrix.target }}
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: minimal
  #         toolchain: ${{ env.RUST_STABLE }}
  #         target: ${{ matrix.target }}
  #         default: true

  #     - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
  #       uses: actions/cache@v2.1.4
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #         key: ${{ needs.registry-cache.outputs.cache-key }}

  #     - name: Restore ${{ needs.cargo-ndk.outputs.cache-key }} cache
  #       uses: actions/cache@v2.1.4
  #       with:
  #         path: ~/.cargo/bin/cargo-ndk
  #         key: ${{ needs.cargo-ndk.outputs.cache-key }}

  #     - name: Restore build artifacts
  #       uses: actions/cache@v2.1.4
  #       with:
  #         path: ${{ github.workspace }}/target
  #         key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
  #         restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-

  #     - name: Build Android library ${{ matrix.target }}
  #       working-directory: ./xayn-ai-ffi
  #       run: cargo ndk -t ${{ matrix.ndk-target }} --platform ${{ env.ANDROID_PLATFORM_VERSION }} build --release
