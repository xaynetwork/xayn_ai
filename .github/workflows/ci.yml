# You can find more information about the design decisions here:
# https://github.com/xaynetwork/xayn_ai/pull/21

name: Rust-CI

on:
  push:

env:
  RUST_STABLE: 1.51
  RUST_NIGHTLY: nightly-2021-05-10
  CARGO_NDK: 2.3.0
  ANDROID_PLATFORM_VERSION: 21
  CARGO_LIPO: 3.1.1
  # cmd: `shasum -a 256 cross`
  CROSS_CHECKSUM: 18a3599273773a7d1e333b413751f0adc1a83ec8045d060fee4f0639bd6baaf0
  # cmd: `shasum -a 256 wasm-pack`
  # macOS: `f6e7edb69e233df774f5b92c1002e73db775bb9e71a55528c00e0fe275a7c617`
  WASM_PACK_CHECKSUM: 28cbb8598bf85d52a667169c6187255fef0a085b174ac020790ef2d208fa75be
  # On targets like `*-linux-android*` and `wasm32-unknown-unknown`, reading the model
  # takes a considerable amount of time if it is compiled with the default opt-level
  # for tests. Therefore, we compile them with a higher opt-level to run them faster.
  OPT_TESTS_RUSTFLAGS: '-C opt-level=3 -C debug-assertions=yes -D warnings'
  FLUTTER_VERSION: '2.0.6'
  JAVA_VERSION: '12.x'
  DART_WORKSPACE: ${{ github.workspace }}/bindings/dart
  CARGO_INCREMENTAL: 0

jobs:
  registry-cache:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#rust-tools
    name: cargo-fetch
    runs-on: ubuntu-20.04
    timeout-minutes: 5
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      cache-date: ${{ steps.get-date.outputs.date }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # We want to create a new cache after a week. Otherwise, the cache will
      # take up too much space by caching old dependencies
      - name: Generate Year + ISO week number key
        id: get-date
        shell: bash
        run: echo "::set-output name=date::$(/bin/date -u "+%Y-%V")"

      - name: Generate cargo registry cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-${{ hashFiles('**/Cargo.lock') }})"

      - name: Restore cargo registry ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: ${{ runner.os }}-cargo-registry-${{ steps.get-date.outputs.date }}-

      - name: Fetch dependencies
        run: cargo fetch

  format:
    name: cargo-fmt
    needs: registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_NIGHTLY }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_NIGHTLY }}
          components: rustfmt
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      # cargo fmt does not create any artifacts, therefore we don't need to cache the target folder
      - name: cargo fmt
        run: cargo fmt --all -- --check

  check:
    name: cargo-check
    needs: registry-cache
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-check-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo check
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  clippy:
    name: cargo-clippy
    needs: [registry-cache, check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          components: clippy
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-clippy-${{ needs.registry-cache.outputs.cache-date }}-

      - name: cargo clippy
        run: |
          cargo clippy --all-targets -- --deny warnings
          cargo clippy --all-targets --all-features -- --deny warnings

  test:
    name: cargo-test
    needs: [registry-cache, check]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tests-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Download data
        run: sh download_data.sh

      - name: Run tests
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo test --all-targets
          cargo test --all-targets --all-features
          cargo test --all-features --doc

  coverage:
    name: cargo-tarpaulin
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_STABLE }}
          profile: minimal
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Cache build artifacts
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-tarpaulin-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Download data
        run: sh download_data.sh

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.16.0'
          args: '-v --all-features --force-clean --lib --ignore-tests --fail-under 70 --workspace --exclude xayn-ai-ffi-wasm'

  install-cargo-lipo:
    # we use the latest stable rustc + cargo version that is already installed on the image
    # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-10.15-Readme.md#rust-tools
    name: install-cargo-lipo
    runs-on: macos-10.15
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 15
    steps:
      - name: Generate cargo-lipo cache key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ runner.os }}-cargo-lipo-bin-${{ env.CARGO_LIPO }})"

      - name: Restore ${{ steps.cache-key.outputs.key }} cache
        uses: actions/cache@v2.1.4
        id: cargo-lipo-cache
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install cargo-lipo ${{ env.CARGO_LIPO }}
        if: ${{ !steps.cargo-lipo-cache.outputs.cache-hit }}
        run: cargo install cargo-lipo --version ${{ env.CARGO_LIPO }}

  test-android-libs:
    name: test-android-libs
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-linux-android, armv7-linux-androideabi, i686-linux-android, x86_64-linux-android]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Install Cross
        shell: bash
        run: |
          wget -q -O - https://github.com/rust-embedded/cross/releases/download/v0.2.1/cross-v0.2.1-x86_64-unknown-linux-gnu.tar.gz | tar xvzf -
          echo "${{ env.CROSS_CHECKSUM }} *cross" | shasum -c -
          mv cross ~/.cargo/bin/

      - name: Download data
        run: sh download_data.sh

      - name: Restore build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-test-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-test-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Test Android library ${{ matrix.target }}
        env:
          RUSTFLAGS: ${{ env.OPT_TESTS_RUSTFLAGS }}
        run: cross test --target ${{ matrix.target }} --all-targets -- -Z unstable-options --report-time

  build-ios-libs:
    name: build-ios-libs
    needs: [registry-cache, install-cargo-lipo, test]
    runs-on: macos-10.15
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        target: [aarch64-apple-ios, x86_64-apple-ios]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain with target ${{ matrix.target }}
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: ${{ matrix.target }}
          default: true

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Restore ${{ needs.install-cargo-lipo.outputs.cache-key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: ~/.cargo/bin/cargo-lipo
          key: ${{ needs.install-cargo-lipo.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-${{ matrix.target }}-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Build iOS library ${{ matrix.target }}
        working-directory: ./xayn-ai-ffi-c
        env:
          RUSTFLAGS: -Cdebuginfo=0
        run: cargo lipo --targets ${{ matrix.target }}

      - name: Prepare lib for upload
        run: |
          dir=target/${{ matrix.target }}/debug
          mv $dir/libxayn_ai_ffi_c.a $dir/libxayn_ai_ffi_c_${{ matrix.target }}.a

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-ios-${{ matrix.target }}-${{ hashFiles('target/*-apple-ios/debug/libxayn_ai_ffi_c_*-apple-ios.a') }}
          retention-days: 1
          if-no-files-found: error
          path: target/${{ matrix.target}}/debug/libxayn_ai_ffi_c_${{ matrix.target }}.a

  test-wasm-lib:
    name: test-wasm-lib
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          target: wasm32-unknown-unknown
          default: true

      - name: Restore ${{ needs.registry-cache.outputs.cache-key }} cache
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Install wasm-pack
        shell: bash
        working-directory: ${{ runner.temp }}
        run: |
          wget -q -O - https://github.com/rustwasm/wasm-pack/releases/download/v0.9.1/wasm-pack-v0.9.1-x86_64-unknown-linux-musl.tar.gz | tar xvzf - --strip-components 1
          echo "${{ env.WASM_PACK_CHECKSUM }} *wasm-pack" | shasum -c -
          mv wasm-pack ~/.cargo/bin/

      - name: Download data
        run: sh download_data.sh

      - name: Test WASM library
        working-directory: ./xayn-ai-ffi-wasm
        env:
          RUSTFLAGS: ${{ env.OPT_TESTS_RUSTFLAGS }}
        run: wasm-pack test --firefox --chrome --headless

  build-linux-lib:
    name: build-linux-lib
    needs: [registry-cache, test]
    runs-on: ubuntu-20.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - name: Use cached cargo registry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git
          key: ${{ needs.registry-cache.outputs.cache-key }}

      - name: Restore build artifacts
        uses: actions/cache@v2.1.4
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-linux-${{ needs.registry-cache.outputs.cache-date }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-${{ steps.rust-toolchain.outputs.rustc }}-build-linux-${{ needs.registry-cache.outputs.cache-date }}-

      - name: Build linux lib
        run: cargo build

      - name: Generate lib artifacts key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo build-x86_64-unknown-linux-gnu-${{ hashFiles('target/debug/libxayn_ai_ffi_c.so', 'xayn-ai-ffi-c/ffi.h') }})"

      - name: Upload library artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.cache-key.outputs.key }}
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/target/debug/libxayn_ai_ffi_c.so
            ${{ github.workspace }}/xayn-ai-ffi-c/ffi.h
            ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDartPlugin.h

  flutter-format:
    name: flutter-format
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Restore flutter ${{ env.FLUTTER_VERSION }} cache
        uses: actions/cache@v2.1.4
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-cache-${{ env.FLUTTER_VERSION }}

      - name: Set path or install flutter
        # if there is a cache hit, this step will append the `bin` directory of
        # flutter to `PATH`, otherwise it installs flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Check dart bindings code formatting
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter format --set-exit-if-changed .

  flutter-analyze:
    name: flutter-analyze
    needs: build-linux-lib
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install libclang-10-dev
        # required by ffigen
        run: sudo apt-get install libclang-10-dev

      - name: Setup java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Restore flutter ${{ env.FLUTTER_VERSION }} cache
        uses: actions/cache@v2.1.4
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-cache-${{ env.FLUTTER_VERSION }}

      - name: Set path or install flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Download ${{ needs.build-linux-lib.outputs.cache-key }} artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build-linux-lib.outputs.cache-key }}
          path: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}

      - name: Move C-header and linux lib
        working-directory: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}
        run: |
          mv xayn-ai-ffi-c/ffi.h ${{ github.workspace }}/xayn-ai-ffi-c/ffi.h
          cp -R target ${{ github.workspace }}

      - name: Download data
        run: sh download_data.sh

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run ffigen

      - name: Analyze flutter code
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter analyze

  flutter-test:
    name: flutter-test
    needs: build-linux-lib
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install libclang-10-dev
        run: sudo apt-get install libclang-10-dev

      - name: Setup java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Restore flutter ${{ env.FLUTTER_VERSION }} cache
        uses: actions/cache@v2.1.4
        with:
          path: /opt/hostedtoolcache/flutter
          key: ${{ runner.os }}-flutter-cache-${{ env.FLUTTER_VERSION }}

      - name: Set path or install flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Download ${{ needs.build-linux-lib.outputs.cache-key }} artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build-linux-lib.outputs.cache-key }}
          path: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}

      - name: Move C-header and linux lib
        working-directory: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}
        run: |
          mv xayn-ai-ffi-c/ffi.h ${{ github.workspace }}/xayn-ai-ffi-c/ffi.h
          cp -R target ${{ github.workspace }}

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run ffigen

      - name: Download data
        run: sh download_data.sh

      - name: Run flutter tests
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter test

  flutter-build-example:
    name: flutter-build-example
    needs: [build-linux-lib, build-ios-libs]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, macos-10.15]
        include:
          - os: ubuntu-20.04
            cmd: flutter build apk --debug --split-per-abi
          - os: macos-10.15
            cmd: flutter build ios --debug --no-codesign
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install libclang-10-dev
        if: matrix.os == 'ubuntu-20.04'
        run: sudo apt-get install libclang-10-dev

      # - name: Set XCode version to 12.2
      #   if: matrix.os == 'macos-10.15'
      #   run: sudo xcode-select -s /Applications/Xcode_12.2.app/Contents/Developer

      - name: Download ${{ needs.build-linux-lib.outputs.cache-key }} artifacts
        uses: actions/download-artifact@v2
        with:
          name: ${{ needs.build-linux-lib.outputs.cache-key }}
          path: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}

      - name: Move C-header
        working-directory: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}
        run: mv xayn-ai-ffi-c/ffi.h ${{ github.workspace }}/xayn-ai-ffi-c/ffi.h

      - name: Download all artifacts
        # Currently we can only download all artifacts. Using wildcards is not
        # yet supported. https://github.com/actions/download-artifact/issues/6
        # That said, we're downloading the Linux artifacts twice, but doing it
        # in two download steps would be a bit overkill.
        if: matrix.os == 'macos-10.15'
        uses: actions/download-artifact@v2
        with:
          path: ${{ runner.temp }}/all-artifacts/

      - name: Move iOS libs
        if: matrix.os == 'macos-10.15'
        working-directory: ${{ runner.temp }}/all-artifacts/
        run: |
          find build-x86_64-unknown-linux-gnu-*/bindings/dart/ios/Classes/XaynAiFfiDartPlugin.h -exec cp \{\} ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDartPlugin.h \;
          find build-ios-*/ -iname '*.a' -exec cp \{\} ${{ env.DART_WORKSPACE }}/ios \;

      - name: Set path or install flutter
        uses: subosito/flutter-action@v1
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run ffigen

      - name: Download data
        run: sh download_data.sh

      - name: Build flutter example
        working-directory: ${{ env.DART_WORKSPACE }}/example
        run: ${{ matrix.cmd }}

      - name: Build archive
        if: matrix.os == 'macos-10.15'
        working-directory: ${{ env.DART_WORKSPACE }}/example
        run: xcodebuild -workspace ios/Runner.xcworkspace -scheme Runner archive -configuration release -archivePath build/Runner.xcarchive CODE_SIGNING_ALLOWED="NO"
