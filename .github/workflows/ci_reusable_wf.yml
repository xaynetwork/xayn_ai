name: Reusable Dev CI

on:
  workflow_call:
    outputs:
      cache-key-linux-lib:
        description: Cache key from the build-linux-lib job
        value: ${{ jobs.build-linux-lib.outputs.cache-key }}

env:
  RUST_STABLE: 1.55
  RUST_NIGHTLY: nightly-2021-09-09
  FLUTTER_VERSION: '2.5.3'
  DART_WORKSPACE: ${{ github.workspace }}/bindings/dart
  CARGO_INCREMENTAL: 0

jobs:
  cargo-format:
    name: cargo-format
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install ${{ env.RUST_NIGHTLY }} toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_NIGHTLY }}
          components: rustfmt
          default: true

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641 # 1.3


      # cargo fmt does not create any artifacts, therefore we don't need to cache the target folder
      - name: cargo fmt
        run: cargo fmt --all -- --check

  cargo-sort:
    name: cargo-sort
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install cargo-sort
        uses: ./.ci/install-cargo-sort

      - name: cargo sort
        run: cargo sort --grouped --workspace --check

  cargo-check:
    name: cargo-check
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641 # 1.3

      - name: cargo check
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo check --all-targets
          cargo check --all-targets --all-features

  cargo-clippy:
    name: cargo-clippy
    needs: cargo-check
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          components: clippy
          default: true

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641 # 1.3

      - name: cargo clippy
        run: |
          cargo clippy --all-targets -- --deny warnings
          cargo clippy --all-targets --all-features -- --deny warnings
          
  cargo-test:
    name: cargo-test
    needs: cargo-check
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641 # 1.3

      - name: Download data
        run: sh download_data.sh

      - name: Run tests
        env:
          RUSTFLAGS: "-D warnings"
        run: |
          cargo test --all-targets
          cargo test --all-targets --all-features
          cargo test --all-features --doc

  cargo-tarpaulin:
    name: cargo-tarpaulin
    needs: cargo-test
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          toolchain: ${{ env.RUST_STABLE }}
          profile: minimal
          default: true

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641 # 1.3

      - name: Download data
        run: sh download_data.sh

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@044a1e5bdace8dd2f727b1af63c1d9a1d3572068 # v0.1.3
        with:
          version: '0.16.0'
          args: '-v --all-features --force-clean --lib --ignore-tests --fail-under 70 --workspace --exclude xayn-ai-ffi-wasm --exclude dev-tool --timeout 300'

  build-linux-lib:
    name: build-linux-lib
    needs: cargo-test
    runs-on: ubuntu-20.04
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install ${{ env.RUST_STABLE }} toolchain
        id: rust-toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af # v1.0.7
        with:
          profile: minimal
          toolchain: ${{ env.RUST_STABLE }}
          default: true

      - uses: Swatinem/rust-cache@842ef286fff290e445b90b4002cc9807c3669641 # 1.3

      - name: Build linux lib
        run: cargo build

      - name: Generate lib artifacts key
        id: cache-key
        shell: bash
        run: echo "::set-output name=key::$(echo ${{ github.job }}-x86_64-unknown-linux-gnu-${{ hashFiles('target/debug/libxayn_ai_ffi_c.so', '${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h', '${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h') }})"

      - name: Upload library artifacts
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074 # v2.2.4
        with:
          name: ${{ steps.cache-key.outputs.key }}
          retention-days: 1
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/target/debug/libxayn_ai_ffi_c.so
            ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h
            ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h

  flutter-format:
    name: flutter-format
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install flutter
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8 # v1.5.3
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Check dart bindings code formatting
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter format --set-exit-if-changed .

  flutter-checks:
    name: flutter-checks
    needs: build-linux-lib
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        cmd: [analyze, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Install libclang-10-dev
        # required by ffigen
        run: sudo apt-get install libclang-10-dev

      - name: Install gomplate
        uses: ./.ci/install-gomplate

      - name: Install flutter
        uses: subosito/flutter-action@4389e6cbc6cb8a4b18c628ff96ff90be0e926aa8 # v1.5.3
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Download ${{ needs.build-linux-lib.outputs.cache-key }} artifacts
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60 # v2.0.10
        with:
          name: ${{ needs.build-linux-lib.outputs.cache-key }}
          path: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}

      - name: Move C-headers and linux lib
        working-directory: ${{ runner.temp }}/${{ needs.build-linux-lib.outputs.cache-key }}
        run: |
          mv bindings/dart/ios/Classes/XaynAiFfiCommon.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiCommon.h
          mv bindings/dart/ios/Classes/XaynAiFfiDart.h ${{ env.DART_WORKSPACE }}/ios/Classes/XaynAiFfiDart.h
          cp -R target ${{ github.workspace }}
      - name: Download data
        run: sh download_data.sh

      - name: Install flutter dependencies
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub get

      - name: Generate flutter ffi
        uses: ./.ci/generate-flutter-ffi
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Build asset artifacts
        uses: ./.ci/build-asset-artifacts
        with:
          dart-ws: ${{ env.DART_WORKSPACE }}

      - name: Other Dart code generation
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter pub run build_runner build

      - name: ${{ matrix.cmd }} flutter code
        working-directory: ${{ env.DART_WORKSPACE }}
        run: flutter ${{ matrix.cmd }}
