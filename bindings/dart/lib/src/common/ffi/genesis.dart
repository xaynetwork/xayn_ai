// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// The Xayn AI error codes.
abstract class CCode {
  /// A warning or noncritical error.
  static const int Fault = -2;

  /// An irrecoverable error.
  static const int Panic = -1;

  /// No error.
  static const int None = 0;

  /// A smbert vocab null pointer error.
  static const int SMBertVocabPointer = 1;

  /// A smbert model null pointer error.
  static const int SMBertModelPointer = 2;

  /// A qambert vocab null pointer error.
  static const int QAMBertVocabPointer = 3;

  /// A qambert model null pointer error.
  static const int QAMBertModelPointer = 4;

  /// A LTR model null pointer error.
  static const int LtrModelPointer = 5;

  /// A vocab or model file IO error.
  static const int ReadFile = 6;

  /// A Xayn AI initialization error.
  static const int InitAi = 7;

  /// A Xayn AI null pointer error.
  static const int AiPointer = 8;

  /// A document histories null pointer error.
  static const int HistoriesPointer = 9;

  /// A document history id null pointer error.
  static const int HistoryIdPointer = 10;

  /// A document history session id null pointer error.
  static const int HistorySessionPointer = 11;

  /// A document history query id null pointer error.
  static const int HistoryQueryIdPointer = 12;

  /// A document history query words null pointer error.
  static const int HistoryQueryWordsPointer = 13;

  /// A document history url null pointer error.
  static const int HistoryUrlPointer = 14;

  /// A document history domain null pointer error.
  static const int HistoryDomainPointer = 15;

  /// A documents null pointer error.
  static const int DocumentsPointer = 16;

  /// A document id null pointer error.
  static const int DocumentIdPointer = 17;

  /// A document title null pointer error.
  static const int DocumentTitlePointer = 18;

  /// A document snippet null pointer error.
  static const int DocumentSnippetPointer = 19;

  /// A document session id null pointer error.
  static const int DocumentSessionPointer = 20;

  /// A document query id null pointer error.
  static const int DocumentQueryIdPointer = 21;

  /// A document query words null pointer error.
  static const int DocumentQueryWordsPointer = 22;

  /// A document url null pointer error.
  static const int DocumentUrlPointer = 23;

  /// A document domain null pointer error.
  static const int DocumentDomainPointer = 24;

  /// Deserialization of reranker database error.
  static const int RerankerDeserialization = 25;

  /// Serialization of reranker database error.
  static const int RerankerSerialization = 26;

  /// Deserialization of history collection error.
  static const int HistoriesDeserialization = 27;

  /// Deserialization of document collection error.
  static const int DocumentsDeserialization = 28;

  /// Deserialization of rerank mode error.
  static const int RerankModeDeserialization = 29;

  /// Serialization of sync data error.
  static const int SyncDataSerialization = 30;

  /// Synchronization error.
  static const int Synchronization = 31;

  /// Sync data bytes null pointer error.
  static const int SyncDataBytesPointer = 32;

  /// A global thread pool initialization error.
  static const int InitGlobalThreadPool = 33;
}

abstract class DayOfWeek {
  static const int Mon = 0;
  static const int Tue = 1;
  static const int Wed = 2;
  static const int Thu = 3;
  static const int Fri = 4;
  static const int Sat = 5;
  static const int Sun = 6;
}

abstract class Relevance {
  static const int Low = 0;
  static const int Medium = 1;
  static const int High = 2;
}

/// The mode used to run reranking with.
///
/// This will influence how exactly the reranking
/// is done. E.g. using `News` will disable the
/// QA-mBert pipeline.
abstract class RerankMode {
  /// Run reranking for news.
  static const int StandardNews = 0;

  /// Run reranking for news with personalization.
  static const int PersonalizedNews = 1;

  /// Run reranking for search.
  static const int StandardSearch = 2;

  /// Run reranking for search with personalization.
  static const int PersonalizedSearch = 3;
}

abstract class UserAction {
  static const int Miss = 0;
  static const int Skip = 1;
  static const int Click = 2;
}

abstract class UserFeedback {
  static const int Relevant = 0;
  static const int Irrelevant = 1;
  static const int NotGiven = 2;
}
