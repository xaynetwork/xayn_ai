@JS('xayn_ai_ffi_wasm')
library web;

import 'dart:typed_data' show Uint32List, Uint8List;

import 'package:js/js.dart' show JS;

import 'package:xayn_ai_ffi_dart/src/data/document.dart' show Document;
import 'package:xayn_ai_ffi_dart/src/data/history.dart' show History;

@JS('WXaynAi')
class _XaynAi {
  external _XaynAi(Uint8List vocab, Uint8List model, [Uint8List? serialized]);
  external Uint32List rerank(List<History> history, List<Document> documents);
  external Uint8List serialize();
  external List<dynamic> faults();
  external dynamic analytics();
}

/// The Xayn AI.
class XaynAi {
  late _XaynAi _ai;

  /// Creates and initializes the Xayn AI.
  ///
  /// Requires data generated by [`inputData`]. Optionally accepts the serialized
  /// reranker database, otherwise creates a new one.
  XaynAi.fromInputData(Uint8List vocab, Uint8List model,
      [Uint8List? serialized]) {
    _ai = _XaynAi(vocab, model, serialized);
  }

  /// Reranks the documents.
  ///
  /// The list of ranks is in the same order as the documents.
  ///
  /// In case of a [`Code.panic`], the ai is dropped and its pointer invalidated. The last known
  /// valid state can be restored with a previously serialized reranker database obtained from
  /// [`serialize()`].
  List<int> rerank(List<History> histories, List<Document> documents) {
    return _ai.rerank(histories, documents);
  }

  /// Serializes the current state of the reranker.
  Uint8List serialize() {
    return _ai.serialize();
  }

  /// Retrieves faults which might occur during reranking.
  ///
  /// Faults can range from warnings to errors which are handled in some default way internally.
  List<String> faults() {
    return _ai.faults().cast();
  }

  /// Retrieves the analytics which were collected in the penultimate reranking.
  void analytics() {
    _ai.analytics();
  }
}
