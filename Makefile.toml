[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = "true"

ANDROID_PLATFORM_VERSION = "21"
ANDROID_LIBS_DIR = "bindings/dart/android/src/main/jniLibs"
ANDROID_TARGETS = "arm64-v8a x86_64 x86"

IOS_TARGETS = "aarch64-apple-ios x86_64-apple-ios"

[config]
skip_core_tasks = true
# this avoids cargo make to run these tasks for each crate
default_to_workspace = false

[tasks.default]
dependencies = ["build"]

# Builds rust libs and dart bindings to them.
[tasks.build]
dependencies = ["build-dart"]

# builds xayn-ai library that can be used to run flutter tests locally
[tasks.build-local]
script = ["""
  cargo build
"""]

[tasks.build-mobile.linux]
dependencies = ["build-android"]

[tasks.build-mobile.mac]
dependencies = ["build-android", "build-ios"]

[tasks.build-android]
dependencies = ["build-dart"]
script = ["""
  cargo ndk $(echo $ANDROID_TARGETS | sed 's/[^ ]* */-t &/g') -p $ANDROID_PLATFORM_VERSION -o $ANDROID_LIBS_DIR build --release
"""]

[tasks.build-ios]
dependencies = ["build-dart"]
script = ["""
  cargo lipo --targets $IOS_TARGETS --release
  cp target/universal/release/libxayn_ai_ffi_c.a bindings/dart/ios
"""]

[tasks.build-dart]
dependencies = ["build-bindgen-dart", "build-codegen-dart", "gen-assets"]

[tasks.build-bindgen-dart]
workspace = false
dependencies = ["build-local", "flutter-pub-get"]
script = ["""
  cd bindings/dart
  flutter pub run ffigen --config ffigen_common.yaml
  flutter pub run ffigen --config ffigen_mobile.yaml

  # remove unused mobile-only dependency from common (can't be configured in dart ffigen)
  cd lib/src/common/ffi
  grep --fixed-strings --invert-match "import 'dart:ffi' as ffi;" genesis.dart > genesis
  mv genesis genesis.dart
"""]

# Non bindgen codegen for dart (mainly run `build_runner build`)
[tasks.build-codegen-dart]
workspace = false
dependencies = ["flutter-pub-get"]
script = ["""
  cd bindings/dart
  flutter pub run build_runner build
"""]

[tasks.flutter-pub-get]
workspace = false
script = ["""
  cd bindings/dart
  flutter pub get
"""]

[tasks.gen-assets]
script = ["""
  mkdir -p out
  gomplate -f data/asset_templates/assets.json.tmpl -o out/assets.json
  gomplate -d assets=out/assets.json -f data/asset_templates/assets.dart.tmpl -o bindings/dart/lib/src/common/reranker/assets.dart
  flutter format bindings/dart/lib/src/common/reranker/assets.dart
"""]

[tasks.build-web]
dependencies = ["build-local"]
script_runner = "@duckscript"
env = { WASM_SUFFIX="wasm_bindings" }
script = ["""
  wasm_rel_path = set "bindings/dart/example/${WASM_SUFFIX}"
  set_env WASM_REL_PATH "${wasm_rel_path}"
  cm_run_task build-wasm
  cm_run_task gen-assets
"""]

[tasks.build-wasm]
script = ["""
  wasm-pack build xayn-ai-ffi-wasm --no-typescript --out-dir ../$WASM_REL_PATH --out-name genesis --target web --release
  # remove glob gitignore (https://rustwasm.github.io/docs/wasm-pack/commands/build.html#footnote-0)
  rm $WASM_REL_PATH/.gitignore
"""]

[tasks.test-wasm]
script = ["""
  # This is (way) faster, if rust would allow it we would love to have target specific profile optimization levels
  CARGO_PROFILE_DEV_OPT_LEVEL="2" \
    CARGO_PROFILE_TEST_OPT_LEVEL="2" \
    wasm-pack test xayn-ai-ffi-wasm --firefox --headless
"""]

[tasks.clean-bindgen]
script = ["""
  cd bindings/dart
  rm -f ios/Classes/XaynAiFFiCommon.h
  rm -f ios/Classes/XaynAiFFiDart.h
  rm -f lib/src/common/ffi/genesis.dart
  rm -f lib/src/mobile/ffi/genesis.dart
  rm -f example/wasm_bindings/genesis_bg.wasm
  rm -f example/wasm_bindings/genesis.js
  rm -f example/wasm_bindings/package.json
"""]

[tasks.clean-codegen]
script = ["""
  cd bindings/dart
  rm -f lib/src/common/data/history.g.dart
  rm -f lib/src/common/data/document.g.dart
  rm -f lib/src/common/reranker/debug.g.dart
"""]
